<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Сам процесс шифрования происходит в 32 “раунда”, в один раунд шифруется только правая сторона R0, левая сторона L0 переставляется на место правой после того, как правая сторона будет зашифрована, следовательно зашифрованная правая сторона переходит на место левой, на следующий раунд шифруется новая правая сторона, опять происходит перестановка сторон после шифрования и так происходит до конца цикла - т.е. 32 раза.
В данной обучающей программе шифрование будет происходить вручную 1 раз, остальную часть автоматически выполнит программа.
Процесс шифрования правой части происходит в 3 этапа:
1 этап: Происходит операция двоичного сложения ключа Ri и Ki по mod 2^32, так как складывая мы можем получить двоичное число больше 32 бит, то нужно откинуть лишний бит и для этого используется этот mod 2^32 и решает данный вопрос с лишним битом , Ri это i-ая правая часть шифруемого сообщения, а Ki это подключ используемый для этой итерации шифрования.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        TkSuQmCC
</value>
  </data>
</root>