<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Сам процесс шифрования происходит в 32 “раунда”, в один раунд шифруется только правая сторона R0, левая сторона L0 переставляется на место правой после того, как правая сторона будет зашифрована, следовательно зашифрованная правая сторона переходит на место левой, на следующий раунд шифруется новая правая сторона, опять происходит перестановка сторон после шифрования и так происходит до конца цикла - т.е. 32 раза.
В данной обучающей программе шифрование будет происходить вручную 1 раз, остальную часть автоматически выполнит программа.
Процесс шифрования правой части происходит в 3 этапа:
1 этап: Происходит операция двоичного сложения ключа Ri и Ki по mod 2^32, так как складывая мы можем получить двоичное число больше 32 бит, то нужно откинуть лишний бит и для этого используется этот mod 2^32 и решает данный вопрос с лишним битом , Ri это i-ая правая часть шифруемого сообщения, а Ki это подключ используемый для этой итерации шифрования.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        SUVORK5CYII=
</value>
  </data>
</root>